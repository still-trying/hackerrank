int cmp(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

int* closestNumbers(int arr_count, int* arr, int* result_count) {
    
    qsort(arr, arr_count, sizeof(int), cmp);
    
    // Find minimum adjacent difference
    int minDiff = INT_MAX;
    for (int i = 1; i < arr_count; i++) {
        int diff = arr[i] - arr[i-1];
        if (diff < minDiff) {
            minDiff = diff;
        }
    }

    // Count pairs with minDiff to allocate output array
    int pairs = 0;
    for (int i = 1; i < arr_count; i++) {
        if (arr[i] - arr[i-1] == minDiff) {
            pairs++;
        }
    }
    *result_count = pairs * 2; // Each pair includes two numbers

    int* result = malloc(sizeof(int) * (*result_count));
    int idx = 0;
    for (int i = 1; i < arr_count; i++) {
        if (arr[i] - arr[i-1] == minDiff) {
            result[idx++] = arr[i-1];
            result[idx++] = arr[i];
        }
    }
    return result;
}
